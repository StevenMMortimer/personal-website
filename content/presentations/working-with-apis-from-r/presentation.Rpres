Working with APIs from R
========================================
author: Steven Mortimer
date: November 15, 2016
css: css-presentations.css
width: 960
height: 700

```{r setup, include=FALSE}

library(knitr)
knitr::opts_chunk$set(echo=TRUE, eval=TRUE)

```

2 Common Webservice API Types
====================================

<div class="reference">
  <b>Resources:</b><br>
  <a href="http://spf13.com/post/soap-vs-rest">The Difference Between SOAP and REST</a><br>
  <a href="http://www.soapui.org/testing-dojo/world-of-api-testing/soap-vs--rest-challenges.html">SOAP vs REST Challenges</a>
</div>

<span style="color:red">SOAP</span><br>
<span style="font-size:65%;"><b><u>S</u></b>imple <b><u>O</u></b>bject <b><u>A</u></b>ccess <b><u>P</u></b>rotocol</span><ul style="margin-top: 20px !important;">
<li>Protocol agnostic <br><span style="font-size:60%;">(HTTP, SMTP, TCP, or JMS)</span></li>
<li>Typically XML</li>
<li>Definitions provided by WSDL<br><span style="font-size:55%;">(<b><u>W</u></b>eb <b><u>S</u></b>ervice <b><u>D</u></b>escription <b><u>L</u></b>anguage)</span></li>
</ul>

***

<span style="color:red">REST</span><br>
<span style="font-size:65%;"><b><u>Re</u></b>presentational <b><u>S</u></b>tate <b><u>T</u></b>ransfer</span><ul style="margin-top: 20px !important;">
<li>Noun-Verb Paradigm <br><span style="font-size:60%;">(HTTP GET/POST/PUT/DELETE)</span></li>
<li>Typically formatted as JSON<br><span style="font-size:55%;">(<b><u>J</u></b>ava<b><u>s</u></b>cript <b><u>O</u></b>bject <b><u>N</u></b>otation)</span></li>
</ul>

2 Common API Data Formats
====================================

<span style="color:red">XML</span>
```{r, echo=FALSE, eval=TRUE}

a = XML::newXMLNode("person",
                    XML::newXMLNode("firstname", "Rick"),
                    XML::newXMLNode("lastname", "James"),
                    XML::newXMLNode("occupation", "legend")
                    )
a

```
<ul>
<li>Favored by SOAP APIs</li>
<li>Traditional format</li>
</ul>

***

<span style="color:red">JSON</span>
```{r, echo=FALSE, eval=TRUE}

a <- list(person=list(firstname="Rick", 
                      lastname="James", 
                      occupation="legend"))

cat(jsonlite::toJSON(a, pretty=T, auto_unbox=TRUE))

```
<ul>
<li>Favored by REST APIs</li>
<li>A more modern, flexible approach</li>
</ul>

HTTP
====================================

<div class="reference">
  <b>Resources:</b><br>
  <a href="https://github.com/ropensci/user2016-tutorial/blob/master/slides.pdf">Extracting data from the web: APIs and beyond</a>
</div>

<ul>
  <li>Verbs for different actions
    <ul style="padding-left:40px;">
      <li>
        GET, PUT, POST, DELETE
      </li>
    </ul>
  </li>
  <li>Authentication
    <ul style="padding-left:40px;">
      <li>
        None, Basic, OAuth 2.0
      </li>
    </ul>
  </li>
  <li>
    Use httr for managing HTTP requests in R<br>
    <div style="font-size:60% !important;" class="code-div">
      install.packages('httr')
    </div>
  </li>
</ul>

Required Packages
====================================
<br/>
Before you get started Run the snippet of code below:

```{r load-packages, eval=TRUE, echo=TRUE, warning=FALSE, error=FALSE, message=FALSE}

options(stringsAsFactors = FALSE)

library(dplyr)
library(purrr)
library(httr)
library(jsonlite)
library(xml2)

options(httr_oauth_cache = TRUE)

# all of these packages are part of the tidyverse
# so you could run:
# install.packages('tidyverse'); library(tidyverse)
```

API Simple Authentication (Key in URL)
====================================

<div class="attribution">
  <div class="attribution-link">
    &nbsp;&nbsp;The Open Movie Database API at: <a href="http://www.omdbapi.com/">http://www.omdbapi.com/</a>
  </div>
</div>

```{r, echo=TRUE, eval=TRUE}
resp <- GET(paste0('http://www.omdbapi.com/',
                   '?t=The+Godfather&plot=short&r=xml&apikey=4439909d'))
resp
parsed_xml <- read_xml(content(resp, as="raw"))
parsed_xml
```

Parsing Many Elements
====================================

```{r, echo=TRUE, eval=TRUE}
resp <- GET(paste0('http://www.omdbapi.com/',
                   '?s=The+Godfather&plot=short&r=xml&apikey=4439909d'))
parsed_xml <- read_xml(content(resp, as="raw"))
parsed_xml
```

Parsing Many Elements (cont.)
====================================
<br/>
```{r, echo=TRUE, eval=TRUE}
# the values of a single result are stored
# as attributes inside the XML
# always test your strategies on one record
one_record <- parsed_xml %>% 
  xml_find_all('result') %>% 
  map(as_list) %>% .[[1]]

as.data.frame(attributes(one_record))[c('title', 'year', 'imdbID', 'type')]
```

Parsing Many Elements (cont.)
====================================
<br/>
```{r, echo=TRUE, eval=TRUE}
# now work on them all
search_results <- parsed_xml %>% 
  xml_find_all('result') %>% 
  map(as_list) %>%
  map_df(function(x) as.data.frame(attributes(x)))

head(search_results[c('title', 'year', 'imdbID', 'type')])
```

break-after-no-auth-GET
====================================================
title: false

<h3>
  <div style="position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto;">
    <span style="font-weight:700; color:#25679E;">We just learned:</span>
    </br></br>
    <span style="line-height:1.5em;">Grabbing Data from an API with<br/>No Authentication</span>
  </div>
</h3>

API with Basic Authentication
====================================

Basic Authentication just accessing via username and password. The password may 
or may not be encrypted.

```{r, echo=TRUE, eval=TRUE}
url <- 'http://httpbin.org/basic-auth/user/passwd'
username <- "user"
password <- "passwd"
resp <- GET(url,config=authenticate("user","passwd","basic"))
content(resp, as="parsed")
```

API with Basic (Digest) Authentication
====================================

Digest Authentication means that the receiving server provides a special session 
key back that you can use when requesting information that is more secure than 
basic authentication.

```{r, echo=TRUE, eval=TRUE}

# there is nothing inherently different about
# using digest authentication with httr compared to basic
# it's all managed behind the scenes

url <- 'http://httpbin.org/digest-auth/qop/user/passwd'
username <- "user"
password <- "passwd"
resp <- GET(url, config = authenticate("user", "passwd", "digest"))
content(resp, as="parsed")

```

break-after-basic-auth
====================================================
title: false

<h3>
  <div style="position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto;">
    <span style="font-weight: 700; color:#25679E;">We just learned:</span>
    </br></br>
    <span style="line-height: 1.5em;">Grabbing Data from an API with<br/>Basic Authentication</span>
  </div>
</h3>

API with Token/OAuth 2.0 Authentication
====================================

OAuth is application-specific (Google, Facebook, Twitter). The user authorizes a 
"scope" (breadth of services) to get token.

```{r, echo=TRUE, eval=TRUE}
# Using personal key and secret.
# Create your own at: https://console.developers.google.com/apis
key <- "526767977974-i8pn4vvaga2utiqmeblfnpakflgq964n.apps.googleusercontent.com"
secret <- "tNJixXCExE30f_ARBzb6e4hC"
myapp <- oauth_app("google", key, secret)
myapp
```

API with Token/OAuth 2.0 Authentication
====================================

```{r, echo=TRUE, eval=TRUE}
# get the OAuth token
# this example requires a Google Drive account
token <- oauth2.0_token(oauth_endpoints("google"), 
                        myapp,
                        scope=c("https://www.googleapis.com/auth/drive"))
token
```

API with Token/OAuth 2.0 Authentication
====================================

After you get your token, it's easy! Simply pass it along as an argument to the 
`GET` function.

```{r, echo=TRUE, eval=TRUE}
# give your token to "GET" along with the URL
url <- 'https://www.googleapis.com/drive/v2/about'
req <- GET(url, token)

# parse the response
your_drive_metadata <- content(req, 'parsed')
your_drive_metadata$user[c(2,6)]

# calculate your GDrive Usage Percentage
sprintf("%1.2f%%", 100 * 
          as.numeric(your_drive_metadata$quotaBytesUsed) / 
          as.numeric(your_drive_metadata$quotaBytesTotal))
```

Some more details on OAuth 2.0 Tokens
====================================

<div class="attribution">
  <div class="attribution-link">
    &nbsp;&nbsp;Image from a <span style="font-family: monospace; font-size: 95%;">googlesheets</span> packge vignette entitled: 
    <a target="_blank" href="https://cran.r-project.org/web/packages/googlesheets/vignettes/managing-auth-tokens.html">Managing Auth Tokens</a>
  </div>
</div>

<br/>
* Your script is an "application" working on sombody's behalf
* The user consents to your application's scope
* The token is returned to allow you to continue accessing
given that authorization

*** 

<br/>
<img src='./img/token-flow.png'/>


break-after-token-auth
====================================================
title: false

<h3>
  <div style="position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto;">
    <span style="font-weight: 700; color:#25679E;">We just learned:</span>
    </br></br>
    <span style="line-height: 1.5em;">Grabbing Data from an API with<br/>Token or OAuth 2.0 Authentication</span>
  </div>
</h3>
