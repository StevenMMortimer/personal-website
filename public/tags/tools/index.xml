<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Home</title>
    <link>/tags/tools/</link>
    <description>Recent content in Tools on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tips for Making Professional Shiny Apps with R</title>
      <link>/tips-for-making-professional-shiny-apps-with-r/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/tips-for-making-professional-shiny-apps-with-r/</guid>
      <description>Add a Progress Wheel Create a www Folder Style with CSS Use a global.R file Encourage Data Downloading   If you’ve built a Shiny app with R you’ll know how exciting it feels to get your first app up and running. Shiny is an amazing tool for R users, but how do you take it to the next level? This post with outline five easy ways to make Shiny apps more professional.</description>
    </item>
    
    <item>
      <title>Building a Corporate R Package</title>
      <link>/building-a-corporate-r-package/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/building-a-corporate-r-package/</guid>
      <description>Analytical Functions Company Constants Templating/Formatting Data Source Connections Tutorials   Analytical Functions Creating functions is a programming best practice. They are easier to monitor, test, and teach to others. If your team performs routine calculations, establish a standard by adding functions to the shared library and encourage everyone to use those functions. If your company works a lot with customer phone numbers, then write a function to standardize the formatting.</description>
    </item>
    
    <item>
      <title>Automating R Scripts with Cron</title>
      <link>/automating-r-scripts-with-cron/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/automating-r-scripts-with-cron/</guid>
      <description>Simple Automation Adding Error Emailing Adding Script Logging   Simple Automation If you would like to automate R scripts, one method is to use the cron daemon already packaged on Unix-like servers. Let’s say you have script in your home directory called random.R and you would like to schedule it to run at 5:30pm every day. On the server you will need to edit the crontab and add the following line:</description>
    </item>
    
    <item>
      <title>An R User Chooses a Python IDE</title>
      <link>/an-r-user-chooses-a-python-ide/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/an-r-user-chooses-a-python-ide/</guid>
      <description>Jupyter Notebooks Rodeo Spyder Text Editor (e.g. Sublime) PyCharm Final Thoughts   Yes, this is a post about IDEs. Let the name-calling begin! No, no, I don’t intend to insult or incite any ill-will towards any person or project. This purpose of this post is to give other people who are familiar working with R, some insight into how a fellow R user has evaluated and experienced picking an IDE for programming Python.</description>
    </item>
    
  </channel>
</rss>